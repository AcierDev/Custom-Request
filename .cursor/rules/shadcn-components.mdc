---
description: 
globs: 
alwaysApply: false
---
# shadcn/ui Component Patterns

## Button Variants

- Use appropriate button variants based on action context:
  ```tsx
  // Primary action
  <Button>Primary Action</Button>
  
  // Secondary action
  <Button variant="secondary">Secondary Action</Button>
  
  // Destructive action
  <Button variant="destructive">Delete</Button>
  
  // Outline variant for less emphasis
  <Button variant="outline">Less Emphasis</Button>
  
  // Ghost variant for subtle actions
  <Button variant="ghost">Subtle Action</Button>
  
  // Link variant for navigation
  <Button variant="link">Link Style</Button>
  ```

- Use size variants consistently:
  ```tsx
  // Default size
  <Button>Default Size</Button>
  
  // Small size for compact UIs
  <Button size="sm">Small</Button>
  
  // Large size for emphasis
  <Button size="lg">Large</Button>
  
  // Icon button
  <Button size="icon" variant="ghost">
    <Icon className="h-4 w-4" />
  </Button>
  ```

## Card Components

- Use shadcn Card components with consistent structure:
  ```tsx
  <Card>
    <CardHeader>
      <CardTitle>Card Title</CardTitle>
      <CardDescription>Description of the card content</CardDescription>
    </CardHeader>
    <CardContent>
      {/* Main content */}
    </CardContent>
    <CardFooter className="flex justify-between">
      <Button variant="outline">Cancel</Button>
      <Button>Continue</Button>
    </CardFooter>
  </Card>
  ```

## Dialog Components

- Use shadcn Dialog components for modal interactions:
  ```tsx
  <Dialog open={isOpen} onOpenChange={setIsOpen}>
    <DialogTrigger asChild>
      <Button>Open Dialog</Button>
    </DialogTrigger>
    <DialogContent className="sm:max-w-[425px]">
      <DialogHeader>
        <DialogTitle>Dialog Title</DialogTitle>
        <DialogDescription>
          Description of the dialog purpose
        </DialogDescription>
      </DialogHeader>
      <div className="py-4">
        {/* Dialog content */}
      </div>
      <DialogFooter>
        <Button onClick={handleAction}>Confirm</Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
  ```

- Use AlertDialog for confirmation dialogs:
  ```tsx
  <AlertDialog>
    <AlertDialogTrigger asChild>
      <Button variant="destructive">Delete Item</Button>
    </AlertDialogTrigger>
    <AlertDialogContent>
      <AlertDialogHeader>
        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
        <AlertDialogDescription>
          This action cannot be undone. This will permanently delete the item.
        </AlertDialogDescription>
      </AlertDialogHeader>
      <AlertDialogFooter>
        <AlertDialogCancel>Cancel</AlertDialogCancel>
        <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>
      </AlertDialogFooter>
    </AlertDialogContent>
  </AlertDialog>
  ```

## Form Components

- Maintain consistent form component layouts:
  ```tsx
  <div className="space-y-4">
    <div className="space-y-2">
      <Label htmlFor="name">Name</Label>
      <Input id="name" value={name} onChange={(e) => setName(e.target.value)} />
    </div>
    
    <div className="space-y-2">
      <Label htmlFor="email">Email</Label>
      <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
    </div>
    
    <Button type="submit">Submit</Button>
  </div>
  ```

## Tooltip Components

- Use tooltips for additional context on UI elements:
  ```tsx
  <TooltipProvider delayDuration={300}>
    <Tooltip>
      <TooltipTrigger asChild>
        <Button size="icon" variant="ghost">
          <InfoIcon className="h-4 w-4" />
        </Button>
      </TooltipTrigger>
      <TooltipContent side="right">
        <p>Helpful tooltip information</p>
      </TooltipContent>
    </Tooltip>
  </TooltipProvider>
  ```

## Tab Components

- Structure tab interfaces consistently:
  ```tsx
  <Tabs defaultValue={defaultTab} onValueChange={setActiveTab}>
    <TabsList className="grid grid-cols-3">
      <TabsTrigger value="tab1">Tab 1</TabsTrigger>
      <TabsTrigger value="tab2">Tab 2</TabsTrigger>
      <TabsTrigger value="tab3">Tab 3</TabsTrigger>
    </TabsList>
    <TabsContent value="tab1" className="mt-6">
      {/* Tab 1 content */}
    </TabsContent>
    <TabsContent value="tab2" className="mt-6">
      {/* Tab 2 content */}
    </TabsContent>
    <TabsContent value="tab3" className="mt-6">
      {/* Tab 3 content */}
    </TabsContent>
  </Tabs>
  ```

## Slider Component

- Use slider for numerical range input:
  ```tsx
  <div className="space-y-2">
    <div className="flex justify-between">
      <Label>Slider Value: {value}</Label>
      <span className="text-sm text-muted-foreground">{value}%</span>
    </div>
    <Slider
      value={[value]}
      min={0}
      max={100}
      step={1}
      onValueChange={(vals) => setValue(vals[0])}
    />
  </div>
  ```

## Combining with Framer Motion

- Combine shadcn components with framer-motion for enhanced animations:
  ```tsx
  // Animated Card component
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ type: "spring", stiffness: 500, damping: 30 }}
  >
    <Card>
      <CardHeader>
        <CardTitle>Animated Card</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Content */}
      </CardContent>
    </Card>
  </motion.div>
  ```

## Dark Mode Support

- Ensure shadcn components work properly in both light and dark modes:
  ```tsx
  // Card with custom dark mode styles
  <Card className="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700">
    <CardHeader>
      <CardTitle className="text-gray-900 dark:text-gray-100">Title</CardTitle>
    </CardHeader>
    <CardContent>
      {/* Content */}
    </CardContent>
  </Card>
  ```

## Toast Notifications

- Use toast for temporary user feedback:
  ```tsx
  // Success toast
  toast.success("Operation completed successfully");
  
  // Error toast
  toast.error("An error occurred");
  
  // Info toast
  toast.info("Helpful information");
  
  // Warning toast
  toast.warning("Warning message");
  ```
