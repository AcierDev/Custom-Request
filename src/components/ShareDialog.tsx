"use client";

import { useState, useEffect } from "react";
import { useCustomStore } from "@/store/customStore";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Copy, Check, Loader2, LinkIcon, X } from "lucide-react";
import { toast } from "sonner";
import { motion } from "framer-motion";

interface ShareDialogProps {
  isOpen: boolean;
  onClose: () => void;
}

export function ShareDialog({ isOpen, onClose }: ShareDialogProps) {
  const generateShareableLink = useCustomStore(
    (state) => state.generateShareableLink
  );
  const generateShortShareableLink = useCustomStore(
    (state) => state.generateShortShareableLink
  );

  const [shareableLink, setShareableLink] = useState("");
  const [copied, setCopied] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [useShortLink, setUseShortLink] = useState(true);

  // Generate link when dialog opens
  useEffect(() => {
    if (isOpen) {
      generateLink();
    }
  }, [isOpen, useShortLink]);

  const generateLink = () => {
    setIsGenerating(true);

    try {
      // Small delay to allow UI to update with loading state
      setTimeout(() => {
        const link = useShortLink
          ? generateShortShareableLink()
          : generateShareableLink();
        setShareableLink(link);
        setIsGenerating(false);
      }, 100);
    } catch (error) {
      console.error("Error generating link:", error);
      toast.error("Failed to generate shareable link");
      setIsGenerating(false);
    }
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(shareableLink);
    setCopied(true);
    toast.success("Link copied to clipboard!");

    // Reset the copied state after 2 seconds
    setTimeout(() => {
      setCopied(false);
    }, 2000);
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="text-xl flex items-center gap-2">
            <LinkIcon className="h-5 w-5 text-purple-600 dark:text-purple-400" />
            Share Your Design
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4 py-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Copy this link to share your current design with others.
          </p>

          <div className="flex items-center space-x-2">
            <Label htmlFor="use-short-link" className="text-sm">
              Use short link
            </Label>
            <Switch
              id="use-short-link"
              checked={useShortLink}
              onCheckedChange={(checked) => {
                setUseShortLink(checked);
                // Link will be regenerated by the useEffect
              }}
            />
          </div>

          <div className="flex space-x-2">
            <Input
              value={shareableLink}
              readOnly
              className="flex-1"
              disabled={isGenerating}
            />
            <Button
              type="button"
              size="icon"
              onClick={handleCopyLink}
              disabled={isGenerating}
              className={copied ? "bg-green-600 hover:bg-green-700" : ""}
            >
              {isGenerating ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : copied ? (
                <Check className="h-4 w-4" />
              ) : (
                <Copy className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>

        <DialogFooter className="sm:justify-between">
          <Button
            type="button"
            variant="ghost"
            onClick={generateLink}
            disabled={isGenerating}
            className="gap-2"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                <span>Generating...</span>
              </>
            ) : (
              <>
                <LinkIcon className="h-4 w-4" />
                <span>Regenerate</span>
              </>
            )}
          </Button>

          <Button type="button" variant="outline" onClick={onClose}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
